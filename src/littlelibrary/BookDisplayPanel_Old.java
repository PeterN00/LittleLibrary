/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package littlelibrary;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Admin
 */
public final class BookDisplayPanel_Old extends javax.swing.JPanel {

    /**
     * Creates new form BookDisplayPanel
     */
    ArrayList<Book> bookList = BookManagement.bookList();
    public BookDisplayPanel_Old() {
        initComponents();
        bookTable.removeColumn(bookTable.getColumn("ISBN"));
        bookTable.getTableHeader().setEnabled(false);
        //LittleLibrary.displayBook(bookTable);
        bookTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        Font headerFont = new Font("Tahoma", Font.PLAIN, 24);
        bookTable.getTableHeader().setFont(headerFont);
        bookTable.requestFocusInWindow();
        displayBook();
        SearchTable();
        displayFirstBook();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BookDisplayPanel = new javax.swing.JPanel();
        BookInfoPanel = new javax.swing.JPanel();
        BookInfoDisplay = new javax.swing.JPanel();
        buttonEdit = new javax.swing.JButton();
        buttonRemove = new javax.swing.JButton();
        bookCover = new javax.swing.JLabel();
        DisplayInfo = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lbDisplayAuthor = new javax.swing.JLabel();
        labelLanguage = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelISBN = new javax.swing.JLabel();
        lbDisplayCategory = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();
        BookEditPanel = new javax.swing.JPanel();
        buttonAccept = new javax.swing.JButton();
        buttonReturn = new javax.swing.JButton();
        bookCoverEdit = new javax.swing.JLabel();
        buttonChangeCover = new javax.swing.JButton();
        DisplayEditInfo = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        lbDisplayCategoryEdit = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        lbDisplayAuthorEdit = new javax.swing.JLabel();
        TFPrice = new javax.swing.JTextField();
        CBStatus = new javax.swing.JComboBox<>();
        TFQuantity = new javax.swing.JTextField();
        TFISBN = new javax.swing.JTextField();
        TFTitle = new javax.swing.JTextField();
        TFLanguage = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        TFYear = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        buttonAuthorEdit = new javax.swing.JButton();
        buttonCategoryEdit = new javax.swing.JButton();
        bookTablePanel = new javax.swing.JPanel();
        TFSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        buttonRefresh = new javax.swing.JButton();

        BookInfoPanel.setLayout(new java.awt.CardLayout());

        BookInfoDisplay.setPreferredSize(new java.awt.Dimension(950, 400));
        BookInfoDisplay.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonEdit.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buttonEdit.setText("Edit");
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });
        BookInfoDisplay.add(buttonEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, 60));

        buttonRemove.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buttonRemove.setText("Remove");
        buttonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveActionPerformed(evt);
            }
        });
        BookInfoDisplay.add(buttonRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, -1, 60));

        bookCover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BookCover/Empty.jpg"))); // NOI18N
        BookInfoDisplay.add(bookCover, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Author:");

        lbDisplayAuthor.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        labelLanguage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("ISBN:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setText("Language:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Category:");

        labelISBN.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        lbDisplayCategory.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setText("Status:");

        labelStatus.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        javax.swing.GroupLayout DisplayInfoLayout = new javax.swing.GroupLayout(DisplayInfo);
        DisplayInfo.setLayout(DisplayInfoLayout);
        DisplayInfoLayout.setHorizontalGroup(
            DisplayInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DisplayInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DisplayInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DisplayInfoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DisplayInfoLayout.createSequentialGroup()
                        .addGroup(DisplayInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(DisplayInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(DisplayInfoLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(DisplayInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(6, 6, 6)
                        .addGroup(DisplayInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDisplayAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDisplayCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        DisplayInfoLayout.setVerticalGroup(
            DisplayInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DisplayInfoLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(DisplayInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(DisplayInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(lbDisplayAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(DisplayInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(lbDisplayCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(DisplayInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(labelLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(DisplayInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        BookInfoDisplay.add(DisplayInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 110, -1, -1));

        BookInfoPanel.add(BookInfoDisplay, "card2");

        BookEditPanel.setPreferredSize(new java.awt.Dimension(950, 522));
        BookEditPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonAccept.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buttonAccept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Yes Mark.png"))); // NOI18N
        buttonAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAcceptActionPerformed(evt);
            }
        });
        BookEditPanel.add(buttonAccept, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, -1, 60));

        buttonReturn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buttonReturn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/X Mark.png"))); // NOI18N
        buttonReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReturnActionPerformed(evt);
            }
        });
        BookEditPanel.add(buttonReturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, -1, 60));

        bookCoverEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BookCover/Empty.jpg"))); // NOI18N
        BookEditPanel.add(bookCoverEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        buttonChangeCover.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buttonChangeCover.setText("Change");
        buttonChangeCover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChangeCoverActionPerformed(evt);
            }
        });
        BookEditPanel.add(buttonChangeCover, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 420, -1, 50));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel14.setText("Price(VND):");

        lbDisplayCategoryEdit.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel13.setText("Year:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel15.setText("Quantity:");

        lbDisplayAuthorEdit.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        TFPrice.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TFPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TFPriceFocusGained(evt);
            }
        });

        CBStatus.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        CBStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Reserved" }));

        TFQuantity.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TFQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TFQuantityFocusGained(evt);
            }
        });

        TFISBN.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TFISBN.setEnabled(false);
        TFISBN.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TFISBNFocusGained(evt);
            }
        });
        TFISBN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TFISBNMouseClicked(evt);
            }
        });

        TFTitle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TFTitle.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TFTitleFocusGained(evt);
            }
        });

        TFLanguage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TFLanguage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TFLanguageFocusGained(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel12.setText("Title:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel7.setText("ISBN:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel10.setText("Language:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel11.setText("Status:");

        TFYear.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TFYear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TFYearFocusGained(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel8.setText("Author:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel9.setText("Category:");

        buttonAuthorEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Plus.png"))); // NOI18N
        buttonAuthorEdit.setContentAreaFilled(false);
        buttonAuthorEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAuthorEditActionPerformed(evt);
            }
        });

        buttonCategoryEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Plus.png"))); // NOI18N
        buttonCategoryEdit.setContentAreaFilled(false);
        buttonCategoryEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCategoryEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DisplayEditInfoLayout = new javax.swing.GroupLayout(DisplayEditInfo);
        DisplayEditInfo.setLayout(DisplayEditInfoLayout);
        DisplayEditInfoLayout.setHorizontalGroup(
            DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DisplayEditInfoLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DisplayEditInfoLayout.createSequentialGroup()
                        .addComponent(buttonCategoryEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(DisplayEditInfoLayout.createSequentialGroup()
                        .addComponent(lbDisplayCategoryEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(20, Short.MAX_VALUE))))
            .addGroup(DisplayEditInfoLayout.createSequentialGroup()
                .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DisplayEditInfoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel10)
                                .addComponent(jLabel13))
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(DisplayEditInfoLayout.createSequentialGroup()
                                .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(TFYear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CBStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel15))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TFPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TFQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(TFLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(DisplayEditInfoLayout.createSequentialGroup()
                        .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(DisplayEditInfoLayout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)))
                            .addGroup(DisplayEditInfoLayout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(jLabel12)))
                        .addGap(6, 6, 6)
                        .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TFISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TFTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonAuthorEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbDisplayAuthorEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        DisplayEditInfoLayout.setVerticalGroup(
            DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DisplayEditInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TFTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TFISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(lbDisplayAuthorEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonAuthorEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(lbDisplayCategoryEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonCategoryEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TFLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TFYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TFPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(DisplayEditInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TFQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(CBStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        BookEditPanel.add(DisplayEditInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 11, -1, -1));

        BookInfoPanel.add(BookEditPanel, "card3");

        bookTablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TFSearch.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TFSearch.setForeground(new java.awt.Color(153, 153, 153));
        TFSearch.setText("Search by Title/ISBN");
        TFSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TFSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TFSearchFocusLost(evt);
            }
        });
        TFSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TFSearchMouseClicked(evt);
            }
        });
        bookTablePanel.add(TFSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 11, 320, -1));

        bookTable.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "ISBN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookTable.setRowHeight(40);
        bookTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        bookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                bookTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(bookTable);
        if (bookTable.getColumnModel().getColumnCount() > 0) {
            bookTable.getColumnModel().getColumn(0).setResizable(false);
            bookTable.getColumnModel().getColumn(0).setPreferredWidth(700);
            bookTable.getColumnModel().getColumn(1).setResizable(false);
            bookTable.getColumnModel().getColumn(1).setPreferredWidth(30);
        }

        bookTablePanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 57, 400, 543));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/MagnifyingGlass.png"))); // NOI18N
        bookTablePanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        buttonRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Refresh.png"))); // NOI18N
        buttonRefresh.setContentAreaFilled(false);
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });
        bookTablePanel.add(buttonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 11, 40, 40));

        javax.swing.GroupLayout BookDisplayPanelLayout = new javax.swing.GroupLayout(BookDisplayPanel);
        BookDisplayPanel.setLayout(BookDisplayPanelLayout);
        BookDisplayPanelLayout.setHorizontalGroup(
            BookDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bookTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BookInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        BookDisplayPanelLayout.setVerticalGroup(
            BookDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BookDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bookTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BookInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(BookDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(BookDisplayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public void displayBook(){
        DefaultTableModel model = (DefaultTableModel)bookTable.getModel();  
        model.setRowCount(0);
        Object[] row = new Object[2];
        if(!bookList.isEmpty()){
            for(int i=0;i<bookList.size();i++){
                row[0]=bookList.get(i).getTitle();
                row[1]=bookList.get(i).getISBN();
                model.addRow(row);
            }
        }
    }
    
    public void displayEmptyData(int index){
        if(bookList.get(index).getAuthor()==null || bookList.get(index).getAuthor().isEmpty()){
            lbDisplayAuthor.setText("?");
            lbDisplayAuthorEdit.setText("?");
        }
        if(bookList.get(index).getCategory()==null || bookList.get(index).getCategory().isEmpty()){
            lbDisplayCategory.setText("?");
            lbDisplayCategoryEdit.setText("?");
        }
        if(bookList.get(index).getLanguage()==null || bookList.get(index).getLanguage().isEmpty()){
            labelLanguage.setText("?");
            TFLanguage.setText("?");
        }
        if(String.valueOf(bookList.get(index).getPrice())==null){
            TFPrice.setText("?");
        }
        if(String.valueOf(bookList.get(index).getYear())==null){
            TFYear.setText("?");
        }
        if(bookList.get(index).getTitle()==null || bookList.get(index).getTitle().isEmpty()){
            TFTitle.setText("?");
        }
        if(String.valueOf(bookList.get(index).getQuantity())==null){
            TFQuantity.setText("?");
        }
    }
    
    public String[] getCategory(){
        String[] categoryArray;
        int selectedRow = bookTable.getSelectedRow();
        String category = "";
        for(int i=0; i<bookList.size(); i++){
            if(bookTable.getModel().getValueAt(selectedRow, 1).equals(bookList.get(i).getISBN())){
                if(bookList.get(i).getCategory() != null){
                    category = bookList.get(i).getCategory();
                    break;
                }
            }
        }
        if(category.isEmpty())
            categoryArray = null;
        else
            categoryArray = category.split(",\\s");
        
        return categoryArray;
    }
    
    public void categoryTextTruncation(){
        String[] categoryArray = getCategory();
        if(lbDisplayCategory.getToolTipText()!=null)
            lbDisplayCategory.setToolTipText(null);
        if(lbDisplayCategoryEdit.getToolTipText()!=null)
            lbDisplayCategoryEdit.setToolTipText(null);
        UIManager.put("ToolTip.font", new Font("Tahoma", Font.BOLD, 18));
        
        if(categoryArray==null)
            lbDisplayCategory.setText("?");
        else{
            int count = 0;
            StringBuilder sb = new StringBuilder();
            for(int i=0; i<categoryArray.length; i++){
                count+=1;
                sb.append(categoryArray[i]);
                sb.append(", ");
            }

            int count2 = 0;
            StringBuilder sb2 = new StringBuilder();
            for(int i=0; i<categoryArray.length; i++){
                count2+=1;
                sb2.append(categoryArray[i]);
                sb2.append(", ");
                if(count2==7){
                    sb2.append("...");
                    break;
                }
            }
            String category = sb.substring(0, sb.length()-2);
            if(count>7){
                lbDisplayCategory.setText("<html><p align=\"left\">"+sb2.toString()+"</p></html>");
                lbDisplayCategory.setToolTipText("<html><p width=\"300\">"+category+"</p></html>");
                lbDisplayCategoryEdit.setText(lbDisplayCategory.getText());
                lbDisplayCategoryEdit.setToolTipText(lbDisplayCategory.getToolTipText());
            }
            else{
                lbDisplayCategory.setText("<html><p align=\"left\">"+category+"</p></html>");
                lbDisplayCategoryEdit.setText(lbDisplayCategory.getText());
            }
        }
    }
    
    public String[] getAuthor(){
        String[] authorArray;
        int selectedRow = bookTable.getSelectedRow();
        String author = "";
        for(int i=0; i<bookList.size(); i++){
            if(bookTable.getModel().getValueAt(selectedRow, 1).equals(bookList.get(i).getISBN())){
                if(bookList.get(i).getAuthor() != null){
                    author = bookList.get(i).getAuthor();
                    break;
                }
            }
        }
        if(author.isEmpty())
            authorArray = null;
        else
            authorArray = author.split(",\\s");
        
        return authorArray;
    }
    
    public void authorTextTruncation(){
        String[] authorArray = getAuthor();
        if(lbDisplayAuthor.getToolTipText()!=null)
            lbDisplayAuthor.setToolTipText(null);
        if(lbDisplayAuthorEdit.getToolTipText()!=null)
            lbDisplayAuthorEdit.setToolTipText(null);
        UIManager.put("ToolTip.font", new Font("Tahoma", Font.BOLD, 18));
        
        if(authorArray==null)
            lbDisplayAuthor.setText("?");
        else{
            int count = 0;
            StringBuilder sb = new StringBuilder();
            for(int i=0; i<authorArray.length; i++){
                count+=1;
                sb.append(authorArray[i]);
                sb.append(", ");
            }

            int count2 = 0;
            StringBuilder sb2 = new StringBuilder();
            for(int i=0; i<authorArray.length; i++){
                count2+=1;
                sb2.append(authorArray[i]);
                sb2.append(", ");
                if(count2==4){
                    sb2.append("...");
                    break;
                }
            }
            String author = sb.substring(0, sb.length()-2);
            if(count>4){
                lbDisplayAuthor.setText("<html><p align=\"left\">"+sb2.toString()+"</p></html>");
                lbDisplayAuthor.setToolTipText("<html><p width=\"300\">"+author+"</p></html>");
                lbDisplayAuthorEdit.setText(lbDisplayAuthor.getText());
                lbDisplayAuthorEdit.setToolTipText(lbDisplayAuthor.getToolTipText());
            }
            else{
                lbDisplayAuthor.setText("<html><p align=\"left\">"+author+"</p></html>");
                lbDisplayAuthorEdit.setText(lbDisplayAuthor.getText());
            }
        }
    }
    
    public void displayFirstBook(){
        if(!bookList.isEmpty()){
            bookTable.setRowSelectionInterval(0, 0);
            setCover(0);
            labelISBN.setText(bookList.get(0).getISBN());
            TFISBN.setText(bookList.get(0).getISBN());
            labelLanguage.setText(bookList.get(0).getLanguage());
            TFLanguage.setText(bookList.get(0).getLanguage());
            labelStatus.setText(bookList.get(0).getStatus());
            CBStatus.setSelectedItem(bookList.get(0).getStatus());
            TFPrice.setText(String.valueOf(bookList.get(0).getPrice()));
            TFQuantity.setText(String.valueOf(bookList.get(0).getQuantity()));
            TFTitle.setText(bookList.get(0).getTitle());
            TFYear.setText(String.valueOf(bookList.get(0).getYear()));
            displayEmptyData(0);
            authorTextTruncation();
            categoryTextTruncation();
        }
    }
    
    public void setCover(int index){
        if(bookList.get(index).getImage()!=null){
            ImageIcon cover = new ImageIcon(bookList.get(index).getImage());
            bookCover.setIcon(cover);
        }
        else{
            bookCover.setIcon(new ImageIcon(System.getProperty("user.dir")+"/src/BookCover/Empty.jpg"));
        }
    }
    
    public void selectedBook(){
        int selectedBook = bookTable.getSelectedRow();
        for(int i=0; i<bookList.size();i++){
            if(bookTable.getModel().getValueAt(selectedBook,1).equals(bookList.get(i).getISBN())){
                setCover(i);
                labelISBN.setText(bookList.get(i).getISBN());
                TFISBN.setText(bookList.get(i).getISBN());
                labelLanguage.setText(bookList.get(i).getLanguage());
                TFLanguage.setText(bookList.get(i).getLanguage());
                labelStatus.setText(bookList.get(i).getStatus());
                CBStatus.setSelectedItem(bookList.get(i).getStatus());
                TFPrice.setText(String.valueOf(bookList.get(i).getPrice()));
                TFQuantity.setText(String.valueOf(bookList.get(i).getQuantity()));
                TFTitle.setText(bookList.get(i).getTitle());
                TFYear.setText(String.valueOf(bookList.get(i).getYear()));
                displayEmptyData(i);
                authorTextTruncation();
                categoryTextTruncation();
                break;
            }
        }
    }
    
    public void SearchTable(){        
        DefaultTableModel searchmodel = (DefaultTableModel)bookTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(searchmodel);
        bookTable.setRowSorter(sorter);
        TFSearch.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(DocumentEvent de) {
                String text = TFSearch.getText();
                if(text.trim().length()==0 || text.equals("Search by Title/ISBN")){
                    sorter.setRowFilter(null);
                }
                else{
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)"+text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                String text = TFSearch.getText();
                if(text.trim().length()==0 || text.equals("Search by Title/ISBN")){
                    sorter.setRowFilter(null);
                }
                else{
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)"+text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                throw new UnsupportedOperationException("Not supported yet."); 
            }
            
    });
    }
    
    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        int selectedRow = bookTable.getSelectedRow();
        if(selectedRow == -1){
            JOptionPane.showMessageDialog(null, "Please select a book to edit!", "Notification!", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(null, "Do you really want to edit this book?", "Book Editing!",  JOptionPane.YES_NO_OPTION);
        if(confirm==JOptionPane.YES_OPTION){
            BookInfoPanel.removeAll();
            BookInfoPanel.add(BookEditPanel);
            BookInfoPanel.revalidate();
            BookInfoPanel.repaint();
            bookCoverEdit.setIcon(bookCover.getIcon());
            disableComponents();
        }
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveActionPerformed
        int selectedBook = bookTable.getSelectedRow();
        if(selectedBook == -1)
        JOptionPane.showMessageDialog(null, "Please select a book!");
        else{
            int confirm = JOptionPane.showConfirmDialog(null, "Do you really want to remove this book?\n\n"+"ISBN: "+labelISBN.getText()+"\n"+"Title: "+bookTable.getValueAt(selectedBook, 0).toString(),
                "Confirmation", JOptionPane.YES_NO_OPTION);
            if(confirm==JOptionPane.YES_OPTION){
                BookManagement.removeBook(labelISBN.getText());
                buttonRefresh.doClick();
            }
        }
    }//GEN-LAST:event_buttonRemoveActionPerformed

    public ImageIcon resizedImage(String path){
        ImageIcon icon = new ImageIcon(path);
        Image image = icon.getImage().getScaledInstance(250, 300, Image.SCALE_DEFAULT);
        ImageIcon resizedIcon = new ImageIcon(image);
        return resizedIcon;
    }
    
    public byte[] imageToByte(Icon cover){
        byte[] byteArray;
        BufferedImage bf = new BufferedImage(cover.getIconWidth(), cover.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics2D bGr = bf.createGraphics();
        cover.paintIcon(null, bGr, 0, 0);
        bGr.dispose();
        ByteArrayOutputStream bs = new ByteArrayOutputStream();
        try {
            ImageIO.write(bf, "png", bs);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex, "Alert!", JOptionPane.WARNING_MESSAGE);
        }
        
        byteArray = bs.toByteArray();
        
        return byteArray;
    }
    
    public int checkISBN_IsNumeric(String ISBN){
        int count = 0;
        for(int i=0;i<ISBN.length();i++){
            if(Character.isDigit(ISBN.charAt(i))){
                count+=1;
            }
        }
        return count;
    }
    
    public boolean checkDuplicatedISBN(String ISBN){
        for(int i=0; i<bookList.size(); i++){
            if(ISBN.equals(bookList.get(i).getISBN()))
                return true;
        }
        return false;
    }
    
    public void disableComponents(){
        buttonRefresh.setEnabled(false);
        TFSearch.setEnabled(false);
        bookTable.setEnabled(false);
    }
    
    public void enableComponents(){
        buttonRefresh.setEnabled(true);
        TFSearch.setEnabled(true);
        bookTable.setEnabled(true);
    }
    
    public String[] getEditedAuthor(){
        String[] array;
        if(lbDisplayAuthorEdit.getText().equals("?"))
            array = null;
        else{
            if(lbDisplayAuthorEdit.getToolTipText()!=null){
                String temp = lbDisplayAuthorEdit.getToolTipText().substring(21,lbDisplayAuthorEdit.getToolTipText().length()-11);
                array = temp.split(",\\s");
            }
            else{
                String temp = lbDisplayAuthorEdit.getText().substring(22,lbDisplayAuthorEdit.getText().length()-11);
                array = temp.split(",\\s");
            }
        }
        return array;
    }
    
    public String[] getEditedCategory(){
        String[] categoryList;
        if(lbDisplayCategoryEdit.getText().equals("?"))
            categoryList = null;
        else{
            if(lbDisplayCategoryEdit.getToolTipText()!=null){
                String temp = lbDisplayCategoryEdit.getToolTipText().substring(21, lbDisplayCategoryEdit.getToolTipText().length()-11);
                categoryList = temp.split(",\\s");
            }
            else{
                String temp = lbDisplayCategoryEdit.getText().substring(22, lbDisplayCategoryEdit.getText().length()-11);
                categoryList = temp.split(",\\s");
            }
        }
        return categoryList;
    }
    
    private void buttonAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAcceptActionPerformed
        int confirm = JOptionPane.showConfirmDialog(null, "Do you really want to save these changes?", "Book Editing",  JOptionPane.YES_NO_OPTION);
        if(confirm==JOptionPane.YES_OPTION){
            if(TFISBN.isEnabled()){
                if(TFISBN.getText().length()!=13){
                    JOptionPane.showMessageDialog(null, "ISBN must have 13 digits in total!", "Notification!", JOptionPane.INFORMATION_MESSAGE);
                    TFISBN.setBackground(Color.yellow);
                    return;
                }
                if(checkISBN_IsNumeric(TFISBN.getText())!=13){
                    JOptionPane.showMessageDialog(null, "ISBN only contains numbers", "Notification!", JOptionPane.INFORMATION_MESSAGE);
                    TFISBN.setBackground(Color.yellow);
                    return;
                }
                if(!labelISBN.getText().equals(TFISBN.getText()) && checkDuplicatedISBN(TFISBN.getText())==true){
                    JOptionPane.showMessageDialog(null, "Book "+"\""+TFISBN.getText()+"\""+" already exists!", "Notification!", JOptionPane.INFORMATION_MESSAGE);
                    TFISBN.setBackground(Color.yellow);
                    return;
                }
            }

            int errorCount=0;
            List<String> error = new ArrayList();
            if(TFTitle.getText().isEmpty()){
                error.add("Title");
                TFTitle.setBackground(Color.yellow);
                errorCount+=1;
            }
            if(TFLanguage.getText().isEmpty()){
                error.add("Language");
                TFLanguage.setBackground(Color.yellow);
                errorCount+=1;
            }
            if(TFYear.getText().isEmpty()){
                error.add("Published year");
                TFYear.setBackground(Color.yellow);
                errorCount+=1;
            }
            if(TFQuantity.getText().isEmpty()){
                error.add("Quantity");
                TFQuantity.setBackground(Color.yellow);
                errorCount+=1;
            }
            if(TFPrice.getText().isEmpty()){
                error.add("Price");
                TFPrice.setBackground(Color.yellow);
                errorCount+=1;
            }
            if(errorCount>0){
                String err = "";
                for(String temp : error){
                    err+=temp+"\n";
                }
                JOptionPane.showMessageDialog(null, "The following field(s) cannot be empty:\n"+err, "Notification!", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            int err = 0;
            try{
                Integer.parseInt(TFQuantity.getText());
            }catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(null, "Quantity has to be an integer!", "Notification!", JOptionPane.INFORMATION_MESSAGE);
                TFQuantity.setBackground(Color.yellow);
                err+=1;
            }
            try{
                Integer.parseInt(TFYear.getText());
            }catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(null, "Published year has to be an integer!", "Notification!", JOptionPane.INFORMATION_MESSAGE);
                TFYear.setBackground(Color.yellow);
                err+=1;
            }
            try{
                Float.parseFloat(TFPrice.getText());
            }catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(null, "Price has to be a number", "Notification!", JOptionPane.INFORMATION_MESSAGE);
                TFPrice.setBackground(Color.yellow);
                err+=1;
            }
            if(err!=0)
                return;

            byte[] Image = imageToByte(bookCoverEdit.getIcon());

            if(!bookCoverEdit.getIcon().equals(bookCover.getIcon()))
                BookManagement.changeCover(labelISBN.getText().trim(), Image);
            
            
            BookManagement.editBook(labelISBN.getText(),TFTitle.getText().trim(), TFLanguage.getText().trim(), Integer.parseInt(TFQuantity.getText().trim()),
                Float.parseFloat(TFPrice.getText().trim()), Integer.parseInt(TFYear.getText().trim()), CBStatus.getSelectedItem().toString());
            
            
            String[] category = getEditedCategory();
            if(category != null){
                BookManagement.deleteBookCategory(TFISBN.getText());
                BookManagement.addBookCategory(TFISBN.getText(), category);
            }
            else
                BookManagement.deleteBookCategory(TFISBN.getText());

            String[] author = getEditedAuthor();
            if(author != null){
                BookManagement.deleteBookAuthor(TFISBN.getText());
                BookManagement.addBookAuthor(TFISBN.getText(), author);
            }
            else
                BookManagement.deleteBookAuthor(TFISBN.getText());

            bookCover.setIcon(bookCoverEdit.getIcon());
            BookInfoPanel.removeAll();
            BookInfoPanel.add(BookInfoDisplay);
            BookInfoPanel.revalidate();
            BookInfoPanel.repaint();
            enableComponents();
            if(TFISBN.isEnabled())
                TFISBN.setEnabled(false);
            bookList = BookManagement.bookList();
            
            buttonRefresh.doClick();
        }

    }//GEN-LAST:event_buttonAcceptActionPerformed

    private void buttonReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReturnActionPerformed
        BookInfoPanel.removeAll();
        BookInfoPanel.add(BookInfoDisplay);
        BookInfoPanel.revalidate();
        BookInfoPanel.repaint();
        selectedBook();
        enableComponents();
        if(TFISBN.isEnabled())
        TFISBN.setEnabled(false);
    }//GEN-LAST:event_buttonReturnActionPerformed

    private void buttonChangeCoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChangeCoverActionPerformed
        JFileChooser fc = new JFileChooser(System.getProperty("user.dir")+"/src/BookCover");
        fc.setAcceptAllFileFilterUsed(false);
        fc.setFileFilter(new FileNameExtensionFilter("JPEG, PNG (*.jpg, *.jpeg, *.png)", "jpg", "jpeg", "png"));
        int result = fc.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION){
            File f = fc.getSelectedFile();
            bookCoverEdit.setIcon(resizedImage(f.getPath()));
        }
    }//GEN-LAST:event_buttonChangeCoverActionPerformed

    private void TFPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFPriceFocusGained
        TFPrice.setBackground(Color.WHITE);
    }//GEN-LAST:event_TFPriceFocusGained

    private void TFQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFQuantityFocusGained
        TFQuantity.setBackground(Color.WHITE);
    }//GEN-LAST:event_TFQuantityFocusGained

    private void TFISBNFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFISBNFocusGained
        TFISBN.setBackground(Color.WHITE);
    }//GEN-LAST:event_TFISBNFocusGained

    private void TFISBNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TFISBNMouseClicked
        if(TFISBN.isEnabled()==false){
            int confirm = JOptionPane.showConfirmDialog(null, "Do you really want to change the ISBN?", "Confirmation",  JOptionPane.YES_NO_OPTION);
            if(confirm==JOptionPane.YES_OPTION){
                TFISBN.setEnabled(true);
            }
        }
    }//GEN-LAST:event_TFISBNMouseClicked

    private void TFTitleFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFTitleFocusGained
        TFTitle.setBackground(Color.WHITE);
    }//GEN-LAST:event_TFTitleFocusGained

    private void TFLanguageFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFLanguageFocusGained
        TFLanguage.setBackground(Color.WHITE);
    }//GEN-LAST:event_TFLanguageFocusGained

    private void TFYearFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFYearFocusGained
        TFYear.setBackground(Color.WHITE);
    }//GEN-LAST:event_TFYearFocusGained

    private void buttonAuthorEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAuthorEditActionPerformed
        String[] authorArray = getEditedAuthor();
        JFrame mainFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
        mainFrame.setEnabled(false);
        AuthorFrame authorFrame = new AuthorFrame(lbDisplayAuthorEdit, mainFrame, authorArray);
    }//GEN-LAST:event_buttonAuthorEditActionPerformed

    private void buttonCategoryEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCategoryEditActionPerformed
        String[] categoryArray = getEditedCategory();
        JFrame mainFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
        mainFrame.setEnabled(false);
        CategoryFrame categoryFrame = new CategoryFrame(lbDisplayCategoryEdit, mainFrame, categoryArray);
    }//GEN-LAST:event_buttonCategoryEditActionPerformed

    private void TFSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFSearchFocusGained
        if(TFSearch.getText().equals("Search by Title/ISBN") && TFSearch.isEnabled()){
            TFSearch.setText("");
            TFSearch.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_TFSearchFocusGained

    private void TFSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TFSearchFocusLost
        if(TFSearch.getText().isEmpty()){
            TFSearch.setForeground(Color.GRAY);
            TFSearch.setText("Search by Title/ISBN");
        }
    }//GEN-LAST:event_TFSearchFocusLost

    private void TFSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TFSearchMouseClicked
        if(TFSearch.getText().equals("Search by Title/ISBN") && TFSearch.isEnabled()){
            TFSearch.setText("");
            TFSearch.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_TFSearchMouseClicked

    private void bookTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookTableMousePressed
        selectedBook();
    }//GEN-LAST:event_bookTableMousePressed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        bookList = BookManagement.bookList();
        displayBook();
    }//GEN-LAST:event_buttonRefreshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BookDisplayPanel;
    private javax.swing.JPanel BookEditPanel;
    private javax.swing.JPanel BookInfoDisplay;
    private javax.swing.JPanel BookInfoPanel;
    private javax.swing.JComboBox<String> CBStatus;
    private javax.swing.JPanel DisplayEditInfo;
    private javax.swing.JPanel DisplayInfo;
    private javax.swing.JTextField TFISBN;
    private javax.swing.JTextField TFLanguage;
    private javax.swing.JTextField TFPrice;
    private javax.swing.JTextField TFQuantity;
    private javax.swing.JTextField TFSearch;
    private javax.swing.JTextField TFTitle;
    private javax.swing.JTextField TFYear;
    private javax.swing.JLabel bookCover;
    private javax.swing.JLabel bookCoverEdit;
    private javax.swing.JTable bookTable;
    private javax.swing.JPanel bookTablePanel;
    private javax.swing.JButton buttonAccept;
    private javax.swing.JButton buttonAuthorEdit;
    private javax.swing.JButton buttonCategoryEdit;
    private javax.swing.JButton buttonChangeCover;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton buttonRemove;
    private javax.swing.JButton buttonReturn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelISBN;
    private javax.swing.JLabel labelLanguage;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel lbDisplayAuthor;
    private javax.swing.JLabel lbDisplayAuthorEdit;
    private javax.swing.JLabel lbDisplayCategory;
    private javax.swing.JLabel lbDisplayCategoryEdit;
    // End of variables declaration//GEN-END:variables
}
