/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package littlelibrary;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JViewport;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Admin
 */
public final class BookDisplayPanel extends javax.swing.JPanel {

    /**
     * Creates new form BookDisplayPanel2
     */
    ArrayList<Book> bookList = BookManagement.bookList();
    String selectedISBN = "";
    String role = "";
    public BookDisplayPanel(String role) {
        initComponents();
        setRole(role);
        showAllBook();
        sortBookPanel();
        displayFirstBook();
    }

    public void setRole(String role){
        this.role = role;
        if(role.equals("Member"))
            btNewBook.setVisible(false);
    }
    
    /**     
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jspBookPanel = new javax.swing.JScrollPane();
        bookDisplayPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        tfSearch = new javax.swing.JTextField();
        btRefresh = new javax.swing.JButton();
        bookInfoDisplayPanel = new javax.swing.JPanel();
        jspInfoPanel = new javax.swing.JScrollPane();
        infoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lbLanguage = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbYear = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbAuthor = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lbCategory = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbStatus = new javax.swing.JLabel();
        jspEditPanel = new javax.swing.JScrollPane();
        editPanel = new javax.swing.JPanel();
        firstPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        tfLanguage = new javax.swing.JTextField();
        tfYear = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lbAuthorEdit = new javax.swing.JLabel();
        btAuthorEdit = new javax.swing.JButton();
        btCategoryEdit = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        lbCategoryEdit = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tfQuantity = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        tfPrice = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cbStatus = new javax.swing.JComboBox<>();
        btNextPage = new javax.swing.JButton();
        secondPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        tfISBN = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lbNewCover = new javax.swing.JLabel();
        btSelectCover = new javax.swing.JButton();
        btPreviousPage = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        btNewBook = new javax.swing.JButton();

        setBackground(new java.awt.Color(190, 218, 245));

        jspBookPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jspBookPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspBookPanel.setPreferredSize(new java.awt.Dimension(850, 500));

        bookDisplayPanel.setBackground(new java.awt.Color(190, 218, 245));

        javax.swing.GroupLayout bookDisplayPanelLayout = new javax.swing.GroupLayout(bookDisplayPanel);
        bookDisplayPanel.setLayout(bookDisplayPanelLayout);
        bookDisplayPanelLayout.setHorizontalGroup(
            bookDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1363, Short.MAX_VALUE)
        );
        bookDisplayPanelLayout.setVerticalGroup(
            bookDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 577, Short.MAX_VALUE)
        );

        jspBookPanel.setViewportView(bookDisplayPanel);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/MagnifyingGlass.png"))); // NOI18N

        tfSearch.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        tfSearch.setForeground(new java.awt.Color(153, 153, 153));
        tfSearch.setText("Search by Title/ISBN");
        tfSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfSearchFocusLost(evt);
            }
        });
        tfSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfSearchMouseClicked(evt);
            }
        });

        btRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Refresh.png"))); // NOI18N
        btRefresh.setContentAreaFilled(false);
        btRefresh.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Refresh_Hover.png"))); // NOI18N
        btRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRefreshActionPerformed(evt);
            }
        });

        bookInfoDisplayPanel.setLayout(new java.awt.CardLayout());

        jspInfoPanel.setBorder(null);
        jspInfoPanel.setPreferredSize(new java.awt.Dimension(520, 574));

        infoPanel.setBackground(new java.awt.Color(204, 255, 204));
        infoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 102, 102)), "INFORMATION", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 3, 14))); // NOI18N
        infoPanel.setPreferredSize(new java.awt.Dimension(450, 550));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Language:");

        lbLanguage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Published year:");

        lbYear.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Author:");

        lbAuthor.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Category:");

        lbCategory.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("Status:");

        lbStatus.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(96, 96, 96))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(lbLanguage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(lbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(lbAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(lbCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(lbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(322, 322, 322))
        );

        jspInfoPanel.setViewportView(infoPanel);

        bookInfoDisplayPanel.add(jspInfoPanel, "card2");

        jspEditPanel.setBorder(null);
        jspEditPanel.setPreferredSize(new java.awt.Dimension(520, 574));

        editPanel.setBackground(new java.awt.Color(204, 255, 204));
        editPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 102, 102)), "INFORMATION EDITING", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 3, 14))); // NOI18N
        editPanel.setPreferredSize(new java.awt.Dimension(450, 550));
        editPanel.setLayout(new java.awt.CardLayout());

        firstPanel.setOpaque(false);
        firstPanel.setPreferredSize(new java.awt.Dimension(450, 550));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setText("Language:");

        tfLanguage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        tfYear.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setText("Published year:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setText("Author:");

        lbAuthorEdit.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbAuthorEdit.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                lbAuthorEditPropertyChange(evt);
            }
        });

        btAuthorEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Plus.png"))); // NOI18N
        btAuthorEdit.setContentAreaFilled(false);
        btAuthorEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAuthorEditActionPerformed(evt);
            }
        });

        btCategoryEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Plus.png"))); // NOI18N
        btCategoryEdit.setContentAreaFilled(false);
        btCategoryEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCategoryEditActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel10.setText("Category:");

        lbCategoryEdit.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbCategoryEdit.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                lbCategoryEditPropertyChange(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel11.setText("Quantity:");

        tfQuantity.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel12.setText("Price (VND):");

        tfPrice.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel13.setText("Status:");

        cbStatus.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Reserved" }));

        btNextPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Right Arrow.png"))); // NOI18N
        btNextPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNextPageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout firstPanelLayout = new javax.swing.GroupLayout(firstPanel);
        firstPanel.setLayout(firstPanelLayout);
        firstPanelLayout.setHorizontalGroup(
            firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(firstPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(firstPanelLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(firstPanelLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btCategoryEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbCategoryEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(firstPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(firstPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfYear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(firstPanelLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(firstPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btAuthorEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbAuthorEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(firstPanelLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, firstPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btNextPage, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170))
        );
        firstPanelLayout.setVerticalGroup(
            firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(firstPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(lbAuthorEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAuthorEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(lbCategoryEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btCategoryEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btNextPage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(210, 210, 210))
        );

        editPanel.add(firstPanel, "card2");

        secondPanel.setOpaque(false);
        secondPanel.setPreferredSize(new java.awt.Dimension(450, 550));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel14.setText("ISBN:");

        tfISBN.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        tfISBN.setEnabled(false);
        tfISBN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfISBNMouseClicked(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel15.setText("Title:");

        tfTitle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        lbNewCover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BookCover/Empty.jpg"))); // NOI18N
        lbNewCover.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        btSelectCover.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btSelectCover.setText("New Cover");
        btSelectCover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectCoverActionPerformed(evt);
            }
        });

        btPreviousPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Left Arrow.png"))); // NOI18N
        btPreviousPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPreviousPageActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel16.setText("(250x300)");

        javax.swing.GroupLayout secondPanelLayout = new javax.swing.GroupLayout(secondPanel);
        secondPanel.setLayout(secondPanelLayout);
        secondPanelLayout.setHorizontalGroup(
            secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(secondPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(secondPanelLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(secondPanelLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(secondPanelLayout.createSequentialGroup()
                        .addComponent(lbNewCover, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16))
                    .addComponent(btSelectCover))
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secondPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btPreviousPage, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170))
        );
        secondPanelLayout.setVerticalGroup(
            secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(secondPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btSelectCover)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(secondPanelLayout.createSequentialGroup()
                        .addComponent(lbNewCover, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secondPanelLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(171, 171, 171)))
                .addComponent(btPreviousPage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        editPanel.add(secondPanel, "card3");

        jspEditPanel.setViewportView(editPanel);

        bookInfoDisplayPanel.add(jspEditPanel, "card3");

        btNewBook.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btNewBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/New Book Icon (Button).png"))); // NOI18N
        btNewBook.setText("NEW BOOK");
        btNewBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btNewBookMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btNewBookMouseExited(evt);
            }
        });
        btNewBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jspBookPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bookInfoDisplayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(4, 4, 4)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btNewBook)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btNewBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jspBookPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bookInfoDisplayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tfSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfSearchFocusGained
        if(tfSearch.getText().equals("Search by Title/ISBN") && tfSearch.isEnabled()){
            tfSearch.setText("");
            tfSearch.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_tfSearchFocusGained

    private void tfSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfSearchFocusLost
        if(tfSearch.getText().isEmpty()){
            tfSearch.setForeground(Color.GRAY);
            tfSearch.setText("Search by Title/ISBN");
        }
    }//GEN-LAST:event_tfSearchFocusLost

    private void tfSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfSearchMouseClicked
        if(tfSearch.getText().equals("Search by Title/ISBN") && tfSearch.isEnabled()){
            tfSearch.setText("");
            tfSearch.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_tfSearchMouseClicked

    private void btRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRefreshActionPerformed
        bookList = BookManagement.bookList();
        showAllBook();
    }//GEN-LAST:event_btRefreshActionPerformed

    private void tfISBNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfISBNMouseClicked
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to change the international standard book number?", "Confirmation!", JOptionPane.YES_NO_OPTION);
        if(confirm==JOptionPane.YES_OPTION){
            tfISBN.setEnabled(true);
        }
    }//GEN-LAST:event_tfISBNMouseClicked

    private void btNextPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNextPageActionPerformed
        editPanel.removeAll();
        editPanel.add(secondPanel);
        editPanel.revalidate();
        editPanel.repaint();
        editPanel.setPreferredSize(new Dimension(450,550));
    }//GEN-LAST:event_btNextPageActionPerformed

    private void btPreviousPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPreviousPageActionPerformed
        editPanel.removeAll();
        editPanel.add(firstPanel);
        editPanel.revalidate();
        editPanel.repaint();
        resizeEditPanel_LabelTextChanges();
    }//GEN-LAST:event_btPreviousPageActionPerformed

    private void btSelectCoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectCoverActionPerformed
        openFileChooser(lbNewCover);
    }//GEN-LAST:event_btSelectCoverActionPerformed

    private void btAuthorEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAuthorEditActionPerformed
        String[] authorArray = getEditedAuthor();
        JFrame mainFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
        mainFrame.setEnabled(false);
        AuthorFrame authorFrame = new AuthorFrame(lbAuthorEdit, mainFrame, authorArray);
        authorFrame.setVisible(true);
    }//GEN-LAST:event_btAuthorEditActionPerformed

    private void btCategoryEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCategoryEditActionPerformed
        String[] categoryArray = getEditedCategory();
        JFrame mainFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
        mainFrame.setEnabled(false);
        CategoryFrame categoryFrame = new CategoryFrame(lbCategoryEdit, mainFrame, categoryArray);
        categoryFrame.setVisible(true);
    }//GEN-LAST:event_btCategoryEditActionPerformed

    private void lbAuthorEditPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lbAuthorEditPropertyChange
        if(evt.getPropertyName().equals("text"))
            resizeEditPanel_LabelTextChanges();
    }//GEN-LAST:event_lbAuthorEditPropertyChange

    private void lbCategoryEditPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lbCategoryEditPropertyChange
        if(evt.getPropertyName().equals("text"))
            resizeEditPanel_LabelTextChanges();
    }//GEN-LAST:event_lbCategoryEditPropertyChange

    private void btNewBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNewBookActionPerformed
        NewBookForm nbform = new NewBookForm();
        nbform.setVisible(true);
    }//GEN-LAST:event_btNewBookActionPerformed

    private void btNewBookMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btNewBookMouseEntered
        btNewBook.setBackground(new Color(120,165,208));
    }//GEN-LAST:event_btNewBookMouseEntered

    private void btNewBookMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btNewBookMouseExited
        btNewBook.setBackground(UIManager.getColor("control"));
    }//GEN-LAST:event_btNewBookMouseExited

    public String[] getAuthor(){
        String[] authorArray;
        String author = "";
        for(int i=0; i<bookList.size(); i++){
            if(selectedISBN.equals(bookList.get(i).getISBN())){
                if(bookList.get(i).getAuthor() != null){
                    author = bookList.get(i).getAuthor();
                    break;
                }
            }
        }
        if(author.isEmpty())
            authorArray = null;
        else
            authorArray = author.split(",\\s");
        
        return authorArray;
    }
    
    public void authorTextTruncation(){
        String[] authorArray = getAuthor();
        if(lbAuthor.getToolTipText()!=null)
            lbAuthor.setToolTipText(null);
        if(lbAuthorEdit.getToolTipText()!=null)
            lbAuthorEdit.setToolTipText(null);
        UIManager.put("ToolTip.font", new Font("Tahoma", Font.BOLD, 18));
        
        if(authorArray==null)
            lbAuthor.setText("?");
        else{
            int count = 0;
            StringBuilder sb = new StringBuilder();
            for(int i=0; i<authorArray.length; i++){
                count+=1;
                sb.append(authorArray[i]);
                sb.append(", ");
            }

            int count2 = 0;
            StringBuilder sb2 = new StringBuilder();
            for(int i=0; i<authorArray.length; i++){
                count2+=1;
                sb2.append(authorArray[i]);
                sb2.append(", ");
                if(count2==5){
                    sb2.append("...");
                    break;
                }
            }
            String author = sb.substring(0, sb.length()-2);
            if(count>5){
                lbAuthor.setText("<html><p align=\"left\">"+sb2.toString()+"</p></html>");
                lbAuthor.setToolTipText("<html><p width=\"300\">"+author+"</p></html>");
                lbAuthorEdit.setText(lbAuthor.getText());
                lbAuthorEdit.setToolTipText(lbAuthor.getToolTipText());
            }
            else{
                lbAuthor.setText("<html><p align=\"left\">"+author+"</p></html>");
                lbAuthorEdit.setText(lbAuthor.getText());
            }
        }
    }
    
    public String[] getCategory(){
        String[] categoryArray;
        String category = "";
        for(int i=0; i<bookList.size(); i++){
            if(selectedISBN.equals(bookList.get(i).getISBN())){
                if(bookList.get(i).getCategory() != null){
                    category = bookList.get(i).getCategory();
                    break;
                }
            }
        }
        if(category.isEmpty())
            categoryArray = null;
        else
            categoryArray = category.split(",\\s");
        
        return categoryArray;
    }
    
    public void categoryTextTruncation(){
        String[] categoryArray = getCategory();
        if(lbCategory.getToolTipText()!=null)
            lbCategory.setToolTipText(null);
        if(lbCategoryEdit.getToolTipText()!=null)
            lbCategoryEdit.setToolTipText(null);
        UIManager.put("ToolTip.font", new Font("Tahoma", Font.BOLD, 18));
        
        if(categoryArray==null)
            lbCategory.setText("?");
        else{
            int count = 0;
            StringBuilder sb = new StringBuilder();
            for(int i=0; i<categoryArray.length; i++){
                count+=1;
                sb.append(categoryArray[i]);
                sb.append(", ");
            }

            int count2 = 0;
            StringBuilder sb2 = new StringBuilder();
            for(int i=0; i<categoryArray.length; i++){
                count2+=1;
                sb2.append(categoryArray[i]);
                sb2.append(", ");
                if(count2==10){
                    sb2.append("...");
                    break;
                }
            }
            String category = sb.substring(0, sb.length()-2);
            if(count>10){
                lbCategory.setText("<html><p align=\"left\">"+sb2.toString()+"</p></html>");
                lbCategory.setToolTipText("<html><p width=\"300\">"+category+"</p></html>");
                lbCategoryEdit.setText(lbCategory.getText());
                lbCategoryEdit.setToolTipText(lbCategory.getToolTipText());
            }
            else{
                lbCategory.setText("<html><p align=\"left\">"+category+"</p></html>");
                lbCategoryEdit.setText(lbCategory.getText());
            }
        }
    }
    
    public void displayEmptyData(int index){
        if(bookList.get(index).getAuthor()==null || bookList.get(index).getAuthor().isEmpty()){
            lbAuthor.setText("?");
            lbAuthorEdit.setText("?");
        }
        if(bookList.get(index).getCategory()==null || bookList.get(index).getCategory().isEmpty()){
            lbCategory.setText("?");
            lbCategoryEdit.setText("?");
        }
        if(bookList.get(index).getLanguage()==null || bookList.get(index).getLanguage().isEmpty()){
            lbLanguage.setText("?");
            tfLanguage.setText("?");
        }
        if(String.valueOf(bookList.get(index).getPrice())==null){
            tfPrice.setText("?");
        }
        if(String.valueOf(bookList.get(index).getYear())==null){
            lbYear.setText("?");
            tfYear.setText("?");
        }
        if(bookList.get(index).getTitle()==null || bookList.get(index).getTitle().isEmpty()){
            tfTitle.setText("?");
        }
        if(String.valueOf(bookList.get(index).getQuantity())==null){
            tfQuantity.setText("?");
        }
    }
    
    public void displayInfoPanel(){
        for(int i = 0; i < bookList.size(); i++){
            if(selectedISBN.equals(bookList.get(i).getISBN())){
                lbLanguage.setText("<html><p align=\"left\">"+bookList.get(i).getLanguage()+"</p></html>");
                lbYear.setText(String.valueOf(bookList.get(i).getYear()));
                lbStatus.setText(bookList.get(i).getStatus());
                authorTextTruncation();
                categoryTextTruncation();
                displayEmptyData(i);
                break;
            }
        }
    }
    
    public void resizeEditPanel(String author, String category){
        editPanel.setPreferredSize(new Dimension(450, 550));
        
        String tempAuthor = author;
        String tempCategory = category;
        int count = 0;
        boolean flagAuthor;
        boolean flagCategory;
        if(tempAuthor.length()>21){
            flagAuthor = true;
            while(flagAuthor==true){
                tempAuthor = tempAuthor.substring(0, tempAuthor.length()-21);
                count+=29;
                if(tempAuthor.length()<=21)
                    flagAuthor = false;
            }
        }
        if(tempCategory.length()>21){
            flagCategory = true;
            while(flagCategory==true){
                tempCategory = tempCategory.substring(0, tempCategory.length()-21);
                count+=29;
                if(tempCategory.length()<=21)
                    flagCategory = false;
            }
        }
        
        if(count!=0){
            editPanel.setPreferredSize(new Dimension(450, 550 + count));
        }
    }
    
    public void resizeEditPanel_LabelTextChanges(){
        String author = lbAuthorEdit.getText();
        String category = lbCategoryEdit.getText();
        if((author.isEmpty() || author.equals("?")) && (category.isEmpty() || category.equals("?"))){
            editPanel.setPreferredSize(new Dimension(450, 550));
            return;
        }
        if((author.isEmpty() || author.equals("?")) && (!category.isEmpty() && !category.equals("?"))){
            resizeEditPanel("", category.substring(22, category.length()-11));
            return;
        }
        if((!author.isEmpty() && !author.equals("?")) && (category.isEmpty() || category.equals("?"))){
            resizeEditPanel(author.substring(22, author.length()-11), "");
            return;
        }
        resizeEditPanel(author.substring(22, author.length()-11), category.substring(22, category.length()-11));
    }
    
    public void displayInfoEditPanel(){
        for(int i = 0; i < bookList.size(); i++){
            if(selectedISBN.equals(bookList.get(i).getISBN())){
                tfLanguage.setText(bookList.get(i).getLanguage());
                tfYear.setText(String.valueOf(bookList.get(i).getYear()));
                cbStatus.setSelectedItem(bookList.get(i).getStatus());
                tfQuantity.setText(String.valueOf(bookList.get(i).getQuantity()));
                tfPrice.setText(String.valueOf(bookList.get(i).getPrice()));
                authorTextTruncation();
                categoryTextTruncation();
                tfISBN.setText(bookList.get(i).getISBN());
                tfTitle.setText(bookList.get(i).getTitle());
                setCover_NormalSize(lbNewCover,i);
                displayEmptyData(i);
                break;
            }
        }
        resizeEditPanel_LabelTextChanges();
    }
    
    public byte[] imageToByte(Icon cover){
        byte[] byteArray;
        BufferedImage bf = new BufferedImage(cover.getIconWidth(), cover.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics2D bGr = bf.createGraphics();
        cover.paintIcon(null, bGr, 0, 0);
        bGr.dispose();
        ByteArrayOutputStream bs = new ByteArrayOutputStream();
        try {
            ImageIO.write(bf, "png", bs);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex, "Alert!", JOptionPane.WARNING_MESSAGE);
        }
        
        byteArray = bs.toByteArray();
        
        return byteArray;
    }
    
    public void openFileChooser(JLabel cover){
        JFileChooser fc = new JFileChooser(System.getProperty("user.dir")+"/src/BookCover");
        fc.setAcceptAllFileFilterUsed(false);
        fc.setFileFilter(new FileNameExtensionFilter("JPEG, PNG (*.jpg, *.jpeg, *.png)", "jpg", "jpeg", "png"));
        int result = fc.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION){
            try {
                File f = fc.getSelectedFile();
                cover.setIcon(resizedImage_NormalSize(Files.readAllBytes(f.toPath())));
                cover.setVisible(true);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }
    
    public ImageIcon resizedImage_SmallerSize(byte[] b){
        ImageIcon icon = new ImageIcon(b);
        Image image = icon.getImage().getScaledInstance(200, 250, Image.SCALE_DEFAULT);
        ImageIcon resizedIcon = new ImageIcon(image);
        return resizedIcon;
    }
    
    public ImageIcon resizedImage_NormalSize(byte[] b){
        ImageIcon icon = new ImageIcon(b);
        Image image = icon.getImage().getScaledInstance(250, 300, Image.SCALE_DEFAULT);
        ImageIcon resizedIcon = new ImageIcon(image);
        return resizedIcon;
    }
    
    public void setCover_SmallerSize(JLabel lbCover, int index){
        if(bookList.get(index).getImage()!=null){
            ImageIcon cover = resizedImage_SmallerSize(bookList.get(index).getImage());
            lbCover.setIcon(cover);
        }
        else{
            ImageIcon cover = new ImageIcon(System.getProperty("user.dir")+"/src/BookCover/Empty.jpg");
            Image image = cover.getImage().getScaledInstance(200, 250, Image.SCALE_DEFAULT);
            ImageIcon resizedIcon = new ImageIcon(image);
            lbCover.setIcon(resizedIcon);
        }
    }
    
    public void setCover_NormalSize(JLabel lbCover, int index){
        if(bookList.get(index).getImage()!=null){
            ImageIcon cover = resizedImage_NormalSize(bookList.get(index).getImage());
            lbCover.setIcon(cover);
        }
        else{
            ImageIcon cover = new ImageIcon(System.getProperty("user.dir")+"/src/BookCover/Empty.jpg");
            Image image = cover.getImage().getScaledInstance(250, 300, Image.SCALE_DEFAULT);
            ImageIcon resizedIcon = new ImageIcon(image);
            lbCover.setIcon(resizedIcon);
        }
    }
    
    public void checkTitleLength(JLabel lbTitle, String title){
        UIManager.put("ToolTip.font", new Font("Tahoma", Font.BOLD, 18));
        if(lbTitle.getToolTipText()!=null)
            lbTitle.setToolTipText(null);
        
        if(title.length()>39){
            lbTitle.setText("<html><p align=\"center\" width=\"265\">"+title.substring(0, 39)+"..."+"</p></html>");
            lbTitle.setToolTipText("<html><p align=\"center\" width=\"290\">"+title+"</p></html>");
        }
        else
            lbTitle.setText("<html><p align=\"center\" width=\"265\">"+title+"</p></html>");
    }
    
    public void highLight_and_ScrollBookPanelToView(){
        Component[] bookPanel = bookDisplayPanel.getComponents();
        if(bookPanel.length>1){
            for(Component panel : bookPanel){
                if(panel.getName().substring(0, 13).equals(selectedISBN)){
                    panel.setBackground(new Color(248, 169, 118));
                    Rectangle rec = panel.getBounds();
                    bookDisplayPanel.scrollRectToVisible(rec);
                }
                else
                    panel.setBackground(new Color(197, 235, 223));
            }
        }
    }
    
    public int checkISBN_IsNumeric(String ISBN){
        int count = 0;
        for(int i=0;i<ISBN.length();i++){
            if(Character.isDigit(ISBN.charAt(i))){
                count+=1;
            }
        }
        return count;
    }
    
    public boolean checkDuplicatedISBN(String ISBN){
        for(int i=0; i<bookList.size(); i++){
            if(ISBN.equals(bookList.get(i).getISBN()))
                return true;
        }
        return false;
    }
    
    public int checkInfoInput_EditPanel(){
        int errorCount = 0;
        if(tfISBN.isEnabled()){
            if(tfISBN.getText().length()!=13){
                JOptionPane.showMessageDialog(null, "ISBN must have 13 digits in total!", "Notification!", JOptionPane.INFORMATION_MESSAGE);
                tfISBN.setBackground(Color.yellow);
                errorCount+=1;
                return errorCount;
            }
            if(checkISBN_IsNumeric(tfISBN.getText())!=13){
                JOptionPane.showMessageDialog(null, "ISBN only contains numbers", "Notification!", JOptionPane.INFORMATION_MESSAGE);
                tfISBN.setBackground(Color.yellow);
                errorCount+=1;
                return errorCount;
            }
            if(!selectedISBN.equals(tfISBN.getText()) && checkDuplicatedISBN(tfISBN.getText())==true){
                JOptionPane.showMessageDialog(null, "Book "+"\""+tfISBN.getText()+"\""+" already exists!", "Notification!", JOptionPane.INFORMATION_MESSAGE);
                tfISBN.setBackground(Color.yellow);
                errorCount+=1;
                return errorCount;
            }
        }
        
        List<String> error = new ArrayList();
        if (tfTitle.getText().isEmpty()) {
            error.add("Title");
            tfTitle.setBackground(Color.yellow);
            errorCount += 1;
        }
        if (tfLanguage.getText().isEmpty()) {
            error.add("Language");
            tfLanguage.setBackground(Color.yellow);
            errorCount += 1;
        }
        if (tfYear.getText().isEmpty()) {
            error.add("Published year");
            tfYear.setBackground(Color.yellow);
            errorCount += 1;
        }
        if (tfQuantity.getText().isEmpty()) {
            error.add("Quantity");
            tfQuantity.setBackground(Color.yellow);
            errorCount += 1;
        }
        if (tfPrice.getText().isEmpty()) {
            error.add("Price");
            tfPrice.setBackground(Color.yellow);
            errorCount += 1;
        }
        
        if (errorCount > 0) {
            String err = "";
            for (String temp : error) {
                err += temp + "\n";
            }
            JOptionPane.showMessageDialog(null, "The following field(s) cannot be empty:\n" + err, "Notification!", JOptionPane.INFORMATION_MESSAGE);
            return errorCount;
        }
        
        try {
            Integer.parseInt(tfQuantity.getText());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Quantity has to be an integer!", "Notification!", JOptionPane.INFORMATION_MESSAGE);
            tfQuantity.setBackground(Color.yellow);
            errorCount += 1;
            return errorCount;
        }
        try {
            Integer.parseInt(tfYear.getText());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Published year has to be an integer!", "Notification!", JOptionPane.INFORMATION_MESSAGE);
            tfYear.setBackground(Color.yellow);
            errorCount += 1;
            return errorCount;
        }
        try {
            Float.parseFloat(tfPrice.getText());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Price has to be a number", "Notification!", JOptionPane.INFORMATION_MESSAGE);
            tfPrice.setBackground(Color.yellow);
            errorCount += 1;
            return errorCount;
        }
        
        if(Integer.parseInt(tfQuantity.getText())<0){
            JOptionPane.showMessageDialog(null, "Quantity's value cannot be less than 1!", "Alert!", JOptionPane.INFORMATION_MESSAGE);
            tfQuantity.setBackground(Color.yellow);
            errorCount+=1;
            return errorCount;
        }
        if(Float.parseFloat(tfPrice.getText())<0){
            JOptionPane.showMessageDialog(null, "Price's value cannot be less than 0!", "Alert!", JOptionPane.INFORMATION_MESSAGE);
            tfPrice.setBackground(Color.yellow);
            errorCount+=1;
            return errorCount;
        }
        if(Integer.parseInt(tfYear.getText())<0){
            JOptionPane.showMessageDialog(null, "Published year's value cannot be less than 0!", "Alert!", JOptionPane.INFORMATION_MESSAGE);
            tfYear.setBackground(Color.yellow);
            errorCount+=1;
            return errorCount;
        }
        
        return errorCount;
    }
    
    public String[] getEditedAuthor(){
        String[] author;
        if(lbAuthorEdit.getText().equals("?"))
            author = null;
        else{
            if(lbAuthorEdit.getToolTipText()!=null){
                String temp = lbAuthorEdit.getToolTipText().substring(21,lbAuthorEdit.getToolTipText().length()-11);
                author = temp.split(",\\s");
            }
            else{
                String temp = lbAuthorEdit.getText().substring(22,lbAuthorEdit.getText().length()-11);
                author = temp.split(",\\s");
            }
        }
        return author;
    }
    
    public String[] getEditedCategory(){
        String[] category;
        if(lbCategoryEdit.getText().equals("?"))
            category = null;
        else{
            if(lbCategoryEdit.getToolTipText()!=null){
                String temp = lbCategoryEdit.getToolTipText().substring(21, lbCategoryEdit.getToolTipText().length()-11);
                category = temp.split(",\\s");
            }
            else{
                String temp = lbCategoryEdit.getText().substring(22, lbCategoryEdit.getText().length()-11);
                category = temp.split(",\\s");
            }
        }
        return category;
    }
    
    public JPanel[] bookPanel(){
        JPanel[] bookPanelArray = new JPanel[bookList.size()];
        
        Font font = new Font("Tahoma", Font.BOLD, 18);
        
        for(int i=0; i<bookList.size();i++){
            JLabel lbISBN = new JLabel();
            JLabel lbTitle = new JLabel();
            JLabel lbCover = new JLabel(); 
            lbISBN.setFont(font);
            lbTitle.setFont(font);
            
            lbISBN.setName("lb"+bookList.get(i).getISBN());
            lbTitle.setName("lb"+bookList.get(i).getTitle());
            
            lbISBN.setText(bookList.get(i).getISBN());
            checkTitleLength(lbTitle, bookList.get(i).getTitle());
            
            setCover_SmallerSize(lbCover, i);
            lbCover.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1, true));
            
            lbISBN.setHorizontalAlignment(SwingConstants.CENTER);
            lbTitle.setHorizontalAlignment(SwingConstants.CENTER);
            lbTitle.setAlignmentX(Component.CENTER_ALIGNMENT);
            lbISBN.setAlignmentX(Component.CENTER_ALIGNMENT);
            lbCover.setAlignmentX(Component.CENTER_ALIGNMENT);
            
            JPanel bookPanel = new JPanel();
            bookPanel.setLayout(new BoxLayout(bookPanel, BoxLayout.PAGE_AXIS));
            bookPanel.add(lbISBN);
            bookPanel.add(Box.createRigidArea(new Dimension(0,5)));
            bookPanel.add(lbTitle);
            bookPanel.add(Box.createRigidArea(new Dimension(0,5)));
            bookPanel.add(lbCover);
            
            
            JButton btEdit = new JButton("Edit");
            JButton btRemove = new JButton("Remove");
            btEdit.setFont(font);
            btRemove.setFont(font);
            
            btEdit.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e){
                    tfSearch.setEnabled(false);
                    btRefresh.setEnabled(false);
                    
                    selectedISBN = lbISBN.getText();
                    
                    highLight_and_ScrollBookPanelToView();
                    
                    jspEditPanel.getVerticalScrollBar().setValue(0);
                    
                    JViewport vpBookPanel = (JViewport)bookDisplayPanel.getParent();
                    Point ptVPBP = vpBookPanel.getViewPosition();
                    Rectangle recBP = vpBookPanel.getVisibleRect();
                    recBP.setLocation(ptVPBP);
                    
                    bookDisplayPanel.removeAll();
                    bookDisplayPanel.add(bookPanel);
                    
                    JPanel btPanel = new JPanel();
                    
                    JButton btSave = new JButton("SAVE");
                    JButton btReturn = new JButton("RETURN");
                    btSave.setFont(new Font("Tahoma", Font.BOLD, 24));
                    btReturn.setFont(new Font("Tahoma", Font.BOLD, 24));
                    
                    ImageIcon iconSave = new ImageIcon(System.getProperty("user.dir")+"/src/Images/Yes Mark.png");
                    btSave.setIcon(iconSave);
                    ImageIcon iconReturn = new ImageIcon(System.getProperty("user.dir")+"/src/Images/X Mark.png");
                    btReturn.setIcon(iconReturn);
                    
                    btSave.setHorizontalAlignment(SwingConstants.CENTER);
                    btReturn.setHorizontalAlignment(SwingConstants.CENTER);
                    btSave.setAlignmentX(Component.CENTER_ALIGNMENT);
                    btReturn.setAlignmentX(Component.CENTER_ALIGNMENT);
                    
                    btSave.addActionListener(new ActionListener(){
                        @Override
                        public void actionPerformed(ActionEvent e){
                            int confirm = JOptionPane.showConfirmDialog(null, "Do you really want to save these changes?", "Book Editing",  JOptionPane.YES_NO_OPTION);
                            if(confirm==JOptionPane.YES_OPTION){
                                int err = checkInfoInput_EditPanel();
                                if(err==0){
                                    if(lbNewCover.getIcon()!=null){
                                        byte[] cover = imageToByte(lbNewCover.getIcon());
                                        BookManagement.changeCover(selectedISBN, cover);
                                    }
                                    
                                    if(tfISBN.isEnabled()==true){
                                        BookManagement.editISBN(selectedISBN, tfISBN.getText());
                                        selectedISBN = tfISBN.getText();
                                    }
                                    
                                    BookManagement.editBook(selectedISBN,tfTitle.getText().trim(), tfLanguage.getText().trim(), Integer.parseInt(tfQuantity.getText().trim()),
                                        Float.parseFloat(tfPrice.getText().trim()), Integer.parseInt(tfYear.getText().trim()), cbStatus.getSelectedItem().toString());
                                    
                                    String[] category = getEditedCategory();
                                    if(category != null){
                                        BookManagement.deleteBookCategory(selectedISBN);
                                        BookManagement.addBookCategory(selectedISBN, category);
                                    }
                                    else
                                        BookManagement.deleteBookCategory(selectedISBN);

                                    String[] author = getEditedAuthor();
                                    if(author != null){
                                        BookManagement.deleteBookAuthor(selectedISBN);
                                        BookManagement.addBookAuthor(selectedISBN, author);
                                    }
                                    else
                                        BookManagement.deleteBookAuthor(selectedISBN);
                                    
                                    bookList = BookManagement.bookList();
                                    showAllBook();
                                    
                                    bookInfoDisplayPanel.removeAll();
                                    bookInfoDisplayPanel.add(jspInfoPanel);
                                    bookInfoDisplayPanel.revalidate();
                                    bookInfoDisplayPanel.repaint();
                                    
                                    displayInfoPanel();
                                    highLight_and_ScrollBookPanelToView();
                            
                                    bookDisplayPanel.scrollRectToVisible(recBP);
                                    
                                    tfSearch.setEnabled(true);
                                    btRefresh.setEnabled(true);
                                    tfISBN.setEnabled(false);
                                }
                                
                            }
                        }
                    });
                    
                    btReturn.addActionListener(new ActionListener(){
                        @Override
                        public void actionPerformed(ActionEvent e){
                            showAllBook();
                            bookInfoDisplayPanel.removeAll();
                            bookInfoDisplayPanel.add(jspInfoPanel);
                            bookInfoDisplayPanel.revalidate();
                            bookInfoDisplayPanel.repaint();
                            
                            displayInfoPanel();
                            highLight_and_ScrollBookPanelToView();
                            
                            bookDisplayPanel.scrollRectToVisible(recBP);
                            
                            tfSearch.setEnabled(true);
                            btRefresh.setEnabled(true);
                            tfISBN.setEnabled(false);
                        }
                    });
                    
                    btPanel.setLayout(new FlowLayout());
                    btPanel.add(btSave);
                    btPanel.add(btReturn);
                    btPanel.setOpaque(false);
                    bookDisplayPanel.add(btPanel);
                    
                    bookDisplayPanel.revalidate();
                    bookDisplayPanel.repaint();
                    
                    bookPanel.setBackground(new Color(248, 169, 118));
                    
                    editPanel.removeAll();
                    editPanel.add(firstPanel);
                    editPanel.revalidate();
                    editPanel.repaint();
                    
                    bookInfoDisplayPanel.removeAll();
                    bookInfoDisplayPanel.add(jspEditPanel);
                    bookInfoDisplayPanel.revalidate();
                    bookInfoDisplayPanel.repaint(); 
                    
                    displayInfoEditPanel();
                }
            });
            
            btRemove.addActionListener(new ActionListener(){
               @Override
               public void actionPerformed(ActionEvent e){
                   String title = bookPanel.getName().substring(14);
                   int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove this book?\n\n"
                           +"ISBN: "+lbISBN.getText()+"\n"+"Title: "+title, "Confirmation!", JOptionPane.YES_NO_OPTION);
                   if(confirm==JOptionPane.YES_OPTION){
                       BookManagement.removeBook(lbISBN.getText());
                       
                       bookList = BookManagement.bookList();
                       showAllBook();
                       
                       tfSearch.setEnabled(true);
                       btRefresh.setEnabled(true);
                   }
               }
            });
            
            btEdit.setHorizontalAlignment(SwingConstants.CENTER);
            btRemove.setHorizontalAlignment(SwingConstants.CENTER);
            btEdit.setAlignmentX(Component.CENTER_ALIGNMENT);
            btRemove.setAlignmentX(Component.CENTER_ALIGNMENT);
            
            if(role.equals("Member")){
                btEdit.setVisible(false);
                btRemove.setVisible(false);
            }
            
            bookPanel.add(Box.createRigidArea(new Dimension(0,5)));
            bookPanel.add(btEdit);
            bookPanel.add(Box.createRigidArea(new Dimension(0,5)));
            bookPanel.add(btRemove);
            
            bookPanel.setPreferredSize(new Dimension(260,410));
            bookPanel.setName(bookList.get(i).getISBN()+"_"+bookList.get(i).getTitle());
            bookPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2, true));
            bookPanel.setBackground(new Color(197, 235, 223));
            
            bookPanel.addMouseListener(new MouseAdapter(){
                @Override
                public void mouseEntered(MouseEvent e){
                    if(!bookPanel.getBackground().equals(new Color(248, 169, 118)))
                        bookPanel.setBorder(BorderFactory.createLineBorder(new Color(255, 0, 0), 3, true));
                }
                
                @Override
                public void mouseExited(MouseEvent e){
                    bookPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2, true));
                }
                
                @Override
                public void mousePressed(MouseEvent e){
                    bookPanel.setBackground(new Color(248, 169, 118));
                    selectedISBN = lbISBN.getText();
                    displayInfoPanel();
                    highLight_and_ScrollBookPanelToView();
                }
            });
            
            bookPanelArray[i] = bookPanel;
        }
        
        return bookPanelArray;
        
        
    }
    
    public void showAllBook(){
        JPanel[] bookPanel = bookPanel();
        
        bookDisplayPanel.removeAll();
        bookDisplayPanel.setLayout(new GridLayout(0,3,20,20));
        
        for(JPanel panel : bookPanel)
            bookDisplayPanel.add(panel);
        
        bookDisplayPanel.revalidate();
        bookDisplayPanel.repaint();
    }

    public void displayFirstBook(){
        for(Component cp : bookDisplayPanel.getComponents()){
            for(MouseListener ml : cp.getMouseListeners()){
                ml.mousePressed(new MouseEvent(cp, 0, 0, 0, 0, 0, 1, false));
                break;
            }
            break;
        }
    }
    
    public void searchBook(){
        JPanel[] bookPanelArray = bookPanel();
        
        if(tfSearch.getText().isEmpty() || tfSearch.getText().equals("Search by Title/ISBN"))
            showAllBook();
        
        
        else{
            bookDisplayPanel.removeAll();
            for(JPanel panel : bookPanelArray){
                if(panel.getName().toLowerCase().contains(tfSearch.getText().trim().toLowerCase())){
                    bookDisplayPanel.add(panel);
                }
            }
        }
        bookDisplayPanel.revalidate();
        bookDisplayPanel.repaint();
        
    }
    
    public void sortBookPanel(){
        tfSearch.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(DocumentEvent de) {
                searchBook();
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                searchBook();
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bookDisplayPanel;
    private javax.swing.JPanel bookInfoDisplayPanel;
    private javax.swing.JButton btAuthorEdit;
    private javax.swing.JButton btCategoryEdit;
    private javax.swing.JButton btNewBook;
    private javax.swing.JButton btNextPage;
    private javax.swing.JButton btPreviousPage;
    private javax.swing.JButton btRefresh;
    private javax.swing.JButton btSelectCover;
    private javax.swing.JComboBox<String> cbStatus;
    private javax.swing.JPanel editPanel;
    private javax.swing.JPanel firstPanel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jspBookPanel;
    private javax.swing.JScrollPane jspEditPanel;
    private javax.swing.JScrollPane jspInfoPanel;
    private javax.swing.JLabel lbAuthor;
    private javax.swing.JLabel lbAuthorEdit;
    private javax.swing.JLabel lbCategory;
    private javax.swing.JLabel lbCategoryEdit;
    private javax.swing.JLabel lbLanguage;
    private javax.swing.JLabel lbNewCover;
    private javax.swing.JLabel lbStatus;
    private javax.swing.JLabel lbYear;
    private javax.swing.JPanel secondPanel;
    private javax.swing.JTextField tfISBN;
    private javax.swing.JTextField tfLanguage;
    private javax.swing.JTextField tfPrice;
    private javax.swing.JTextField tfQuantity;
    private javax.swing.JTextField tfSearch;
    private javax.swing.JTextField tfTitle;
    private javax.swing.JTextField tfYear;
    // End of variables declaration//GEN-END:variables
}
