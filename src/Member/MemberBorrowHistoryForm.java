package Member;


import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import littlelibrary.Book;
import littlelibrary.BookManagement;
import littlelibrary.BorrowDetailsForm;
import littlelibrary.BorrowInfo;
import littlelibrary.BorrowInfoManagement;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Admin
 */
public final class MemberBorrowHistoryForm extends javax.swing.JFrame {

    /**
     * Creates new form MemberBorrowHistoryForm
     */
    ArrayList<BorrowInfo> borrowList = BorrowInfoManagement.borrowInfoList();
    ArrayList<Book> bookList = BookManagement.bookList();
    public MemberBorrowHistoryForm(int libID) {
        initComponents();
        borrowHistoryTable.getTableHeader().setEnabled(false);
        borrowHistoryTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        borrowHistoryTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 24));
        borrowHistoryTable.requestFocusInWindow();
        displayBorrowHistoryTable(libID);
        SearchTable();
        this.setLocationRelativeTo(null);
        this.getContentPane().setBackground(new Color(190,218,245));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        borrowHistoryTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        tfSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Borrow History");

        borrowHistoryTable.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        borrowHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Borrow ID", "ISBN", "Title", "Borrow Date", "Due Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        borrowHistoryTable.setAutoscrolls(false);
        borrowHistoryTable.setRowHeight(30);
        borrowHistoryTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        borrowHistoryTable.getTableHeader().setReorderingAllowed(false);
        borrowHistoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                borrowHistoryTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(borrowHistoryTable);
        borrowHistoryTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (borrowHistoryTable.getColumnModel().getColumnCount() > 0) {
            borrowHistoryTable.getColumnModel().getColumn(0).setResizable(false);
            borrowHistoryTable.getColumnModel().getColumn(0).setPreferredWidth(150);
            borrowHistoryTable.getColumnModel().getColumn(1).setResizable(false);
            borrowHistoryTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            borrowHistoryTable.getColumnModel().getColumn(2).setResizable(false);
            borrowHistoryTable.getColumnModel().getColumn(2).setPreferredWidth(400);
            borrowHistoryTable.getColumnModel().getColumn(3).setResizable(false);
            borrowHistoryTable.getColumnModel().getColumn(3).setPreferredWidth(250);
            borrowHistoryTable.getColumnModel().getColumn(4).setResizable(false);
            borrowHistoryTable.getColumnModel().getColumn(4).setPreferredWidth(250);
            borrowHistoryTable.getColumnModel().getColumn(5).setResizable(false);
            borrowHistoryTable.getColumnModel().getColumn(5).setPreferredWidth(150);
        }

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/MagnifyingGlass.png"))); // NOI18N

        tfSearch.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        tfSearch.setForeground(new java.awt.Color(153, 153, 153));
        tfSearch.setText("Search");
        tfSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfSearchFocusLost(evt);
            }
        });
        tfSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfSearchMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("*Double click for more borrow details");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 980, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfSearch)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void checkTitleLength(Component cp, Object obj){
        JLabel lb = (JLabel) cp;
        UIManager.put("ToolTip.font", new Font("Tahoma", Font.BOLD, 18));
        if(lb.getToolTipText()!=null)
            lb.setToolTipText(null);
        
        if(obj.toString().length()>39){
            lb.setText(obj.toString().substring(0, 24)+"...");
            lb.setToolTipText("<html><p align=\"center\" width=\"290\">"+obj.toString()+"</p></html>");
        }
        else
            lb.setText(obj.toString());
    }
    
    public void cellRenderer(JTable table, String title){
        table.getColumnModel().getColumn(5).setCellRenderer(new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column){
                Component cp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                
                Object obj = table.getValueAt(row, 5);
                
                if(obj.equals("PENDING"))
                    cp.setForeground(Color.GREEN);
                if(obj.equals("LATE"))
                    cp.setForeground(Color.RED);
                if(obj.equals("RESOLVED"))
                    cp.setForeground(Color.BLUE);
                
                return cp;
            }
        });
        
        table.getColumnModel().getColumn(2).setCellRenderer(new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column){
                Component cp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                
                Object obj = table.getValueAt(row, 2);
                
                checkTitleLength(cp, obj);
                
                return cp;
            }
        });
        
    }
    
    public void displayBorrowHistoryTable(int libID){
        DefaultTableModel model = (DefaultTableModel) borrowHistoryTable.getModel();
        model.setRowCount(0);
        Object[] row = new Object[6];
        for(BorrowInfo bor : borrowList){
            if(bor.getMemberLibID() == libID){
                row[0] = bor.getBorrowID();
                row[1] = bor.getBorrowedISBN();
                
                for(Book book : bookList){
                    if(bor.getBorrowedISBN().equals(book.getISBN())){
                        row[2] = book.getTitle();
                        break;
                    }
                }
                
                row[3] = bor.getBorrowDate();
                row[4] = bor.getDueDate();
                row[5] = BorrowInfoManagement.getStatus(bor.getReturnDate(), bor.getDueDate());
                
                model.addRow(row);
                cellRenderer(borrowHistoryTable, row[2].toString());
            }
        }
    }
    
    public void SearchTable(){        
        DefaultTableModel searchmodel = (DefaultTableModel)borrowHistoryTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(searchmodel);
        borrowHistoryTable.setRowSorter(sorter);
        tfSearch.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(DocumentEvent de) {
                String text = tfSearch.getText();
                if(text.trim().length()==0 || text.equals("Search")){
                    sorter.setRowFilter(null);
                }
                else{
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)"+text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                String text = tfSearch.getText();
                if(text.trim().length()==0 || text.equals("Search")){
                    sorter.setRowFilter(null);
                }
                else{
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)"+text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                
            }
            
    });
    }
    
    private void tfSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfSearchFocusGained
        if(tfSearch.getText().equals("Search") && tfSearch.isEnabled()){
            tfSearch.setText("");
            tfSearch.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_tfSearchFocusGained

    private void tfSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfSearchFocusLost
        if(tfSearch.getText().isEmpty()){
            tfSearch.setForeground(Color.GRAY);
            tfSearch.setText("Search");
        }
    }//GEN-LAST:event_tfSearchFocusLost

    private void tfSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfSearchMouseClicked
        if(tfSearch.getText().equals("Search") && tfSearch.isEnabled()){
            tfSearch.setText("");
            tfSearch.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_tfSearchMouseClicked

    private void borrowHistoryTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrowHistoryTableMousePressed
        int borrowID = Integer.parseInt(borrowHistoryTable.getValueAt(borrowHistoryTable.getSelectedRow(), 0).toString());
        if(evt.getClickCount()==2 && !evt.isConsumed()){
            evt.consume();
            BorrowDetailsForm bdf = new BorrowDetailsForm(borrowID);
            bdf.setVisible(true);
        }
    }//GEN-LAST:event_borrowHistoryTableMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable borrowHistoryTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
}
